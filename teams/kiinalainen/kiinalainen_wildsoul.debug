-- original wildsoul bot by Aleks_Dark
--####################################################################
--####################################################################
--#                                                                 ##
--#                       Bot Initiation                            ##
--#                                                                 ##
--####################################################################
--####################################################################

local _G = getfenv(0)
local object = _G.object

object.myName = object:GetName()

runfile "bots/core_herobot.lua"

local core, eventsLib, behaviorLib, metadata, skills = object.core, object.eventsLib, object.behaviorLib, object.metadata, object.skills

local print, ipairs, pairs, string, table, next, type, tinsert, tremove, tsort, format, tostring, tonumber, strfind, strsub
    = _G.print, _G.ipairs, _G.pairs, _G.string, _G.table, _G.next, _G.type, _G.table.insert, _G.table.remove, _G.table.sort, _G.string.format, _G.tostring, _G.tonumber, _G.string.find, _G.string.sub
local ceil, floor, pi, tan, atan, atan2, abs, cos, sin, acos, max, random
    = _G.math.ceil, _G.math.floor, _G.math.pi, _G.math.tan, _G.math.atan, _G.math.atan2, _G.math.abs, _G.math.cos, _G.math.sin, _G.math.acos, _G.math.max, _G.math.random

local BotEcho, VerboseLog, BotLog = core.BotEcho, core.VerboseLog, core.BotLog
local Clamp = core.Clamp

BotEcho(object:GetName()..' loading Yogi_main...')

--   item buy order. internal names
behaviorLib.StartingItems  = 	{"Item_IronBuckler", "Item_LoggersHatchet"}


------------------------------------------------------
--            onthink override                      --
-- Called every bot tick, custom onthink code here  --
------------------------------------------------------
-- @param: tGameVariables
-- @return: none
function object:onthinkOverride(tGameVariables)
    self:onthinkOld(tGameVariables)
    jungleLib.assess(object)
    if not self.core.unitSelf:IsAlive() then
    	return
    end

	Booboo=false
	for key, unit in pairs(core.tControllableUnits["AllUnits"]) do
		if unit:GetTypeName()=="Pet_Yogi_Ability1" then
			Booboo=unit
		end
	end

	if not Booboo then
		if core.unitSelf:GetAbility(0):CanActivate() then
			core.OrderAbility(object, core.unitSelf:GetAbility(0))
		end
	else
		--pullExecute(object)
	end

    -- custom code here
end
object.onthinkOld = object.onthink
object.onthink  = object.onthinkOverride

function debugUtility(botBrain)
	local inventory = core.unitSelf:GetInventory(false)
    for i,v in ipairs(inventory) do
    	if v then
    		return 100
		end
    end
    --return 0
    return 100
end

local DROPPED = false
function debugExecute(botBrain)
	Booboo=false
	for key, unit in pairs(core.tControllableUnits["AllUnits"]) do
		if unit:GetTypeName()=="Pet_Yogi_Ability1" then
			Booboo=unit
		end
	end

	if not Booboo or Vector3.Distance2D(core.unitSelf:GetPosition(), Booboo:GetPosition()) > 200 then
		return false
	end

   local inventory = core.unitSelf:GetInventory(false)
    for _,item in ipairs(inventory) do
    	if item then
    		if not DROPPED then 
    			BotEcho("Hero: " .. item:GetSlot() .. ": " .. item:GetTypeName())
    			--core.OrderDropItem(botBrain, core.unitSelf, Booboo:GetPosition(), v)
				core.OrderGiveItem(botBrain, core.unitSelf, Booboo, item)
			end
			DROPPED = true
			return true
		end
    end
    return false
end
behaviorLib.debugBehavior = {}
behaviorLib.debugBehavior["Utility"] = debugUtility
behaviorLib.debugBehavior["Execute"] = debugExecute
behaviorLib.debugBehavior["Name"] = "debug"
tinsert(behaviorLib.tBehaviors, behaviorLib.debugBehavior)
